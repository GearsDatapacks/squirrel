---
version: 1.2.0
title: query that needs more than a single helper function
file: ./test/squirrel_test.gleam
test_name: query_that_needs_more_than_a_single_helper_function_test
---
import decode
import gleam/pgo
import youid/uuid.{type Uuid}

/// A row you get from running the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This type definition was generated automatically using v-test of the
/// > [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub type QueryRow {
  QueryRow(gen_random_uuid: Uuid, date: #(Int, Int, Int))
}

/// Runs the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This function was generated automatically using v-test of
/// > the [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub fn query(db) {
  let decoder =
    decode.into({
      use gen_random_uuid <- decode.parameter
      use date <- decode.parameter
      QueryRow(gen_random_uuid: gen_random_uuid, date: date)
    })
    |> decode.field(0, uuid_decoder())
    |> decode.field(1, date_decoder())

  "select gen_random_uuid(), 'Jan-2-1970'::date"
  |> pgo.execute(db, [], decode.from(decoder, _))
}


// --- UTILS -------------------------------------------------------------------

/// A decoder to decode `date`s coming from a Postgres query.
///
fn date_decoder() {
  use dynamic <- decode.then(decode.dynamic)
  case pgo.decode_date(dynamic) {
    Ok(date) -> decode.into(date)
    Error(_) -> decode.fail("date")
  }
}

/// A decoder to decode `Uuid`s coming from a Postgres query.
///
fn uuid_decoder() {
  decode.then(decode.bit_array, fn(uuid) {
    case uuid.from_bit_array(uuid) {
      Ok(uuid) -> decode.into(uuid)
      Error(_) -> decode.fail("uuid")
    }
  })
}
